
//+++====== По умолчанию ===================================================================

#Область ОписаниеИзменений

#КонецОбласти

//////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РЕГИСТРАЦИИ ОБРАБОТКИ И КОМАНД

#Область РегистрацияОбработки

//************************************************************
// Процедура, которая подготавливает структуру таблицы команд
Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление"		, Новый ОписаниеТипов("Строка"));
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование"		, Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение"	, Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор"			, Новый ОписаниеТипов("Строка"));
	
	Команды.Колонки.Добавить("ЗаменяемыеКоманды"	, Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

//************************************************************
// Создает в таблице команд новую строку
Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "", ЗаменяемыеКоманды = "")
	
	НоваяКоманда 						= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление 			= Представление;
	НоваяКоманда.Идентификатор 			= Идентификатор;
	НоваяКоманда.Использование 			= Использование;
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор 			= Модификатор;
	НоваяКоманда.ЗаменяемыеКоманды 		= ЗаменяемыеКоманды;
	
КонецФункции

//************************************************************
// Вызываться программой, при добавлении файла внешней обработки в справочник.
Функция СведенияОВнешнейОбработке() Экспорт

	//Данные для заполнения сведений об обработке:
	ЭтотОбъектМетаданные 	= ЭтотОбъект.Метаданные();
	НаименованиеОбработки 	= ЭтотОбъектМетаданные.Синоним;	// Возьмем из синонима
	
	ЭтотОбъектМетаданныеКомментарий = ЭтотОбъектМетаданные.Комментарий;
	КомментарийМассив 				= СтрРазделить(ЭтотОбъектМетаданныеКомментарий, ",");
	ВерсияОбработки 				= СтрЗаменить(КомментарийМассив[0], "v", ""); 	// Возьмем из комментария
	ИнформацияПоОбрабтке 			= "Получить программный код реквизитов и элементов на форме"; // Произвольное описание
	
	//Массив назначений
	МассивНазначений 	= Новый Массив;
	УказанныеТипы 		= ЭтотОбъектМетаданные.Реквизиты.СсылкаНаДокумент.Тип.Типы();      // Возьмем типы из реквизита "Документ"
	Для Каждого УказанныйТип ИЗ УказанныеТипы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(УказанныйТип);
		Если ОбъектМетаданных <> Неопределено Тогда
			МассивНазначений.Добавить("Документ." + ОбъектМетаданных.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	//Заполняем структуру сведений
	//	1. Вид - вид обработки.
	//	Тип данных - строка, допустимо одно из 6 значений.
	//	Значения.
	//	1) Глобальные - "ДополнительнаяОбработка", "ДополнительныйОтчет"
	//	2) Назначаемые - "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма" или "СозданиеСвязанныхОбъектов".
	
	//	2. Назначение - объект, для которого назначается данная обработка, 
	//	Массив строк имен объектов метаданных.
	//	Примеры значений массива - "Документ.АвансовыйОтчет" или "Справочник.*", где * - означает все объекта данного вида.
	//	Для глобальных (не назначаемых) обработок параметр не имеет смысла.
	
	//	3. Наименование - название обработки, произвольное наименование
	//	Тип данных - произвольная строка.
	//	Данное наименование будет отображаться в списке дополнительных обработок.
	
	//	4. Версия - номер версии обработки
	//	Тип данных - строка в формате "ХХ.ХХ".
	//	Обозначает версию данной обработки, данная версия будет отображаться в списке дополнительных отчетов и обработок.
	
	//	5. БезопасныйРежим - режим контроля прав пользователя.
	//	Тип данных - булево.
	
	//	6. Информация - краткое описание обработки.
	//	Тип данных - строка.
	//	Данное описание будет отображаться в списке дополнительных обработок.
	
	//	7. Команды - действия предоставляемые обработкой.
	//	Тип данных - таблица значений.
	//	Таблица содержит 5 колонок:
	//	1) Представление. Наименование команды в пользовательском интерфейсе;
	//	2) Идентификатор. Для печатных форм список макетов, для остальных обработок любая строка, уникальная для данной обработки.
	//	3) Использование. Строка, одно из значений - 
	//		- ОткрытиеФормы. Открывает форму обработки.
	//		- ВызовКлиентскогоМетода. Вызов клиентского экспортного метода модуля формы
	//		- ВызовСерверногоМетода. Вызов экспортного серверного метода модуля объекта.
	//		Для внешних печатных форм нужно указывать последнее значение.
	//	4) ПоказыватьОповещение. Булево, нужно ли показывать оповещение при начале и окончании действия.
	//	5) Модификатор. Для внешних печатных форм должно содержаться значение "ПечатьMXL".
	//	6) ЗаменяемыеКоманды
	
	//Добавляемые команды на формы документов
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, НаименованиеОбработки, "ПрограммныйКодОткрытойФормы", "ВызовКлиентскогоМетода", Истина);
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид"				, "ЗаполнениеОбъекта"); 		// Варинаты: ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение"		, МассивНазначений);  		// Массив документов, обрабатываемых обработкой
	ПараметрыРегистрации.Вставить("Наименование"	, НаименованиеОбработки); 	// Имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия"			, ВерсияОбработки);         // Версия обработки, которая будет отображаться в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим"	, Ложь);       				// Включение безопасного режима
	ПараметрыРегистрации.Вставить("Информация"		, ИнформацияПоОбрабтке);	// Описание обработки для пользователя
	ПараметрыРегистрации.Вставить("Команды"			, ТаблицаКоманд);        	// Таблица команд, добавляемых в систему
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()

#КонецОбласти

//////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

//Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, СозданныеОбъекты) Экспорт
//	
//	

//КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если ИдентификаторКоманды = "ПрограммныйКодОткрытойФормы" Тогда
		
	КонецЕсли;
	
КонецПроцедуры
// Функция формирует печатную форму документа.
//
Функция СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	
	//	Алгоритм формирования печатной формы
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
// ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
// МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
// ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
// КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
// ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода = Неопределено) Экспорт
	
	//УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, "Заголовок табличного документа", СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати));
	
КонецПроцедуры // Печать()

//---====== По умолчанию =================================================================== 
